#include "TM1637.h"


#define SELECT  4           //  Старт / Стоп
#define LEVEL   5           //  Номер программы


#define CLK 2               //  TM1637 CLK
#define DIO 3               //  TM1637 DIO

TM1637 tm1637(CLK, DIO);

int8_t NumTab[36] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34, 35};



// Пины на реле - секциями по 10шт (можно также написать их названия - A0, A1 и т.п.)
int relays[60] = 
{
    A12,  7,  8,  9, 10, 11, 12, 13,  14,  15, 
     16, 17, 18, 19, 20, 21, 22, 23,  24,  25, 
     26, 27, 28, 29, 30, 31, 32, 33,  34,  35, 
     36, 37, 38, 39, 40, 41, 42, 43,  44,  45, 
     46, 47, 48, 49, 50, 51, 52, 53,  A0,  A1, 
     A2, A3, A4, A5, A6, A7, A8, A9, A10, A11
};

//int pin6 = 6;
 
// Длительности режимов (если время пришло - все реле выключатся, независимо на каком реле встала работа)
int modes[36] = 
{
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
};

// Длительности пауз режимов
int modes_pause[36] = 
{
    10,  20,  30,  40,  50,  60, 70,  80, 90, 100, 110,  120, 130, 140, 150, 170, 180, 
    10,  20,  30,  40,  50,  60, 70,  80, 90, 100, 110,  120, 130, 140, 150, 170, 180
};

unsigned long pause_one = 200;  /// Указано в миллисекундах, возможно надо корректировать на 1-2 мс
unsigned long pause_two = 250;  /// Указано в миллисекундах, возможно надо корректировать на 1-4 мс


unsigned long cnt = 0; 
unsigned long time_period = 0; 
unsigned long num_programm = 0, num_relay = 0;
bool it_work = false, flag_select = false, flag_level = false;
bool state_relay = false;

unsigned long pause_cnt = 0;

void run_tm1637()
{   
    String m = String(num_programm + 1);
    int mlength = m.length();

    if(mlength != 4)
    {
        for(int i = mlength; i != 4; i++) m = "0" + m;
    }

    tm1637.display(0, NumTab[m.substring(0, 1).toInt()]);
    tm1637.display(1, NumTab[m.substring(1, 2).toInt()]); 
    tm1637.display(2, NumTab[m.substring(2, 3).toInt()]);
    tm1637.display(3, NumTab[m.substring(3, 4).toInt()]);

    tm1637.point(POINT_OFF);
}

void clear_tm1637()
{
    tm1637.display(0, 0);
    tm1637.display(1, 0);
    tm1637.display(2, 0);
    tm1637.display(3, 0);
}

void all_reset()
{
    for(int i = 0; i < 60; i++) 
    {
        digitalWrite(relays[i], HIGH);

        Serial.print("RELAY ");
        Serial.print(i);
        Serial.print(" - ");
        Serial.print(relays[i]);
        Serial.print(" - ");
        Serial.println(digitalRead(relays[i]));

        //delay(100);
    }
    
    it_work = false;
    state_relay = false;
    num_relay = 0;
    cnt = 0;
    run_tm1637();

    Serial.println("ALL RESET");
}

void setup()
{
    Serial.begin(9600);
    
    pinMode(SELECT, INPUT); 
    pinMode(LEVEL,  INPUT); 
    digitalWrite(SELECT, HIGH);
    digitalWrite(LEVEL, HIGH);
    //pinMode(pin6, OUTPUT);
    //digitalWrite(pin6, HIGH);

    for(int i = 0; i < 60; i++)
    {
        pinMode(relays[i], OUTPUT); digitalWrite(relays[i], HIGH);
    }
    
    tm1637.set(7);
    tm1637.init();
    clear_tm1637();
    run_tm1637();
    
    Serial.println("SETUP COMPLETE");
}

void loop()
{
    if(digitalRead(LEVEL) == LOW && flag_level == false && !it_work)
    {
        flag_level = true;
        delay(100);

        Serial.println("BTN LEVEL DOWN");
    }

    if(digitalRead(LEVEL) == HIGH && flag_level == true)
    {
        flag_level = false;
        if(num_programm < 35) num_programm++; else num_programm = 0;
        run_tm1637();
        delay(100);

        Serial.println("BTN LEVEL UP");
    }

    if(digitalRead(SELECT) == LOW && flag_select == false)
    {
        flag_select = true;
        delay(100);

        Serial.println("BTN SELECT DOWN");
    }

    if(digitalRead(SELECT) == HIGH && flag_select == true)
    {
        flag_select = false;
        
        if(it_work)
        {
            all_reset(); 
        }
        else 
        {
            it_work = true;
            state_relay = false;
            num_relay = 0;
            cnt = 0;
            time_period = 0;
        }
        
        delay(100);

        Serial.println("BTN SELECT UP");
    }




    if(it_work)
    {        
        if(num_programm < 18)
        {
            if(state_relay== false) 
            {
                time_period = millis();
                digitalWrite(relays[num_relay], LOW);

                Serial.print("RELAY ");
                Serial.print(num_relay);
                Serial.print(" - ");
                Serial.print(relays[num_relay]);
                Serial.print(" - ");
                Serial.println(digitalRead(relays[num_relay]));
                
                state_relay = true;
            }

            if(millis() - time_period >= pause_one) 
            {
                digitalWrite(relays[num_relay], HIGH);
                
                Serial.print("RELAY ");
                Serial.print(num_relay);
                Serial.print(" - ");
                Serial.print(relays[num_relay]);
                Serial.print(" - ");
                Serial.println(digitalRead(relays[num_relay]));
                               
                pause_cnt = modes_pause[num_programm] * 1000;
                unsigned long cutime = millis();
                while(millis() - cutime < pause_cnt)
                {
                    if(digitalRead(SELECT) == LOW && flag_select == false)
                    {
                       flag_select = true;
                       delay(100);

                       Serial.println("BTN SELECT DOWN");
                    }

                    if(digitalRead(SELECT) == HIGH && flag_select == true)
                    {
                       pause_cnt = 0;
                       flag_select = false;
                       if(it_work) all_reset();
                       delay(100);

                       Serial.println("BTN SELECT UP");
                    }
                    
                    delay(1);
                    //pause_cnt--;
                }      

                num_relay++;

                if(num_relay > 59) num_relay = 0;
                
                cnt++;
                state_relay = false;
            }
        }
        else
        {
            if(state_relay== false) 
            {
                time_period = millis();
                digitalWrite(relays[num_relay], LOW);

                Serial.print("RELAY ");
                Serial.print(num_relay);
                Serial.print(" - ");
                Serial.print(relays[num_relay]);
                Serial.print(" - ");
                Serial.println(digitalRead(relays[num_relay]));
                
                state_relay = true;
            }

            if(millis() - time_period >= pause_two) 
            {
                digitalWrite(relays[num_relay], HIGH);
                
                Serial.print("RELAY ");
                Serial.print(num_relay);
                Serial.print(" - ");
                Serial.print(relays[num_relay]);
                Serial.print(" - ");
                Serial.println(digitalRead(relays[num_relay]));

                pause_cnt = modes_pause[num_programm] * 1000;
                unsigned long cutime = millis();
                while(millis() - cutime < pause_cnt)
                {
                    if(digitalRead(SELECT) == LOW && flag_select == false)
                    {
                       flag_select = true;
                       delay(100);

                       Serial.println("BTN SELECT DOWN");
                    }

                    if(digitalRead(SELECT) == HIGH && flag_select == true)
                    {
                       pause_cnt = 0;
                       flag_select = false;
                       if(it_work) all_reset();
                       delay(100);

                       Serial.println("BTN SELECT UP");
                    }
                    
                    delay(1);
                    //pause_cnt--;
                }      
                                
                num_relay++;
                
                if(num_relay > 59) num_relay = 0;

                cnt++;
                state_relay = false;                     
            }
        } 

        if(cnt == modes[num_programm] * 60) all_reset();
    }
}
